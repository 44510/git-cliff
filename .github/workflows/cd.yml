name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-20.04
    outputs:
      release_body: ${{ steps.release.outputs.release_body }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update config
        shell: bash
        run: sed -E -i "s/\s+\#\s(.*)\s\#\sreplace issue numbers/\\t\1/g" config/cliff.toml
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: config/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="$(printf "$r" | tail -n +3)"
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_ENV
          echo "$r" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

  publish-binaries:
    name: Publish binaries
    needs: generate-changelog
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux-gnu, linux-musl, win-gnu, win-msvc, win32-msvc, macos]
        include:
          - BUILD: linux-gnu
            OS: ubuntu-20.04
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-gnu
          - BUILD: linux-musl
            OS: ubuntu-20.04
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-musl
          - BUILD: win-gnu
            OS: windows-2022
            TOOLCHAIN: stable
            TARGET: x86_64-pc-windows-gnu
          - BUILD: win-msvc
            OS: windows-2022
            TOOLCHAIN: stable
            TARGET: x86_64-pc-windows-msvc
          - BUILD: win32-msvc
            OS: windows-2022
            TOOLCHAIN: stable
            TARGET: i686-pc-windows-msvc
          - BUILD: macos
            OS: macos-11
            TOOLCHAIN: stable
            TARGET: x86_64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install musl-tools
        if: matrix.TARGET == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            --allow-unauthenticated musl-tools
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.TOOLCHAIN }}
          target: ${{ matrix.TARGET }}
          override: true
      - name: Build
        run: cargo build --release --locked --target ${{ matrix.TARGET }}
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release/{man,completions}
          cp {LICENSE,README.md,CHANGELOG.md} release/
          OUT_DIR=release/completions/ cargo run --release --bin git-cliff-completions
          OUT_DIR=release/man/ cargo run --release --bin git-cliff-mangen
          for bin in 'git-cliff' 'git-cliff-completions' 'git-cliff-mangen'; do
            if [ "${{ matrix.OS }}" = "windows-2022" ]; then
              bin="${bin}.exe"
            fi
            cp "target/${{ matrix.TARGET }}/release/${bin}" release/
          done
          mv release/ git-cliff-${{ env.RELEASE_VERSION }}/
      - name: Create release artifacts
        shell: bash
        run: |
          if [ "${{ matrix.OS }}" = "windows-2022" ]; then
            7z a -tzip "git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.zip" \
              git-cliff-${{ env.RELEASE_VERSION }}/
          else
            tar -czvf git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz \
              git-cliff-${{ env.RELEASE_VERSION }}/
            shasum -a 512 git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz \
              > git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz.sha512
          fi
      - name: Sign the release
        if: matrix.OS == 'ubuntu-20.04' || matrix.OS == 'macos-11'
        run: |
          echo "${{ secrets.GPG_RELEASE_KEY }}" | base64 --decode > private.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
            --passphrase-fd 0 --import private.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
            --passphrase-fd 0 --detach-sign \
            git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}.tar.gz
      - name: Upload the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.TARGET }}*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
          release_name: "Release v${{ env.RELEASE_VERSION }}"
          body: "${{ needs.generate-changelog.outputs.release_body }}"

  publish-deb:
    name: Publish Debian package
    needs: generate-changelog
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Build Debian package
        run: |
          # https://github.com/kornelski/cargo-deb/pull/62
          sed "/readme = (.*)/d" -E -i git-cliff/Cargo.toml
          cargo-deb --strip --manifest-path git-cliff/Cargo.toml -v -o git-cliff-${{ env.RELEASE_VERSION }}.deb
      - name: Sign the package
        run: |
          echo "${{ secrets.GPG_RELEASE_KEY }}" | base64 --decode > private.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
            --passphrase-fd 0 --import private.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode=loopback \
            --passphrase-fd 0 --detach-sign \
            git-cliff-${{ env.RELEASE_VERSION }}.deb
      - name: Upload the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: git-cliff-${{ env.RELEASE_VERSION }}.deb
          tag: ${{ github.ref }}
          release_name: "Release v${{ env.RELEASE_VERSION }}"
          body: "${{ needs.generate-changelog.outputs.release_body }}"

  publish-crates-io:
    name: Publish on crates.io
    needs: publish-binaries
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set the release version
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
      - name: Prepare for the crates.io release
        run: |
          mkdir git-cliff-core/config/
          cp config/cliff.toml git-cliff-core/config/
          sed -i 's|"../config/"|"config/"|' git-cliff-core/src/embed.rs
      - name: Publish the library
        run: |
          cargo publish --allow-dirty --manifest-path git-cliff-core/Cargo.toml \
            --locked --token ${{ secrets.CARGO_TOKEN }}
      - name: Wait for library to update
        shell: bash
        run: |
          crate_status="https://raw.githubusercontent.com/rust-lang/crates.io-index/master/gi/t-/git-cliff-core"
          until curl -s "$crate_status" | grep -q '"vers":"${{ env.RELEASE_VERSION }}"'; do sleep 5; done;
      - name: Publish the binary
        run: |
          cargo publish --allow-dirty --manifest-path git-cliff/Cargo.toml \
            --locked --token ${{ secrets.CARGO_TOKEN }}
